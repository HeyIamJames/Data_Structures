# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from graph_weighted import Graph

def test_bredth_traversal():
    g = Graph()
    g.add_node(1)
    g.add_node(2)
    g.add_node(3)
    g.add_node(4)
    g.add_node(5)
    g.add_node(6)
    g.add_node(7)
    g.add_node(8)
    g.add_node(9)
    g.add_node(10)
    g.add_edge(1, 2)
    g.add_edge(1, 5)
    g.add_edge(2, 3)
    g.add_edge(2, 6)
    g.add_edge(3, 8)
    g.add_edge(4, 9)
    g.add_edge(5, 10)
    g.add_edge(6, 8)
    g.add_edge(7, 9)
    g.add_edge(8, 9)
    assert g.breadth_first_traversal(1) == [1, 2, 5, 3, 6, 10, 8, 9]

def test_depth_traversal():
    g = Graph()
    g.add_node(1)
    g.add_node(2)
    g.add_node(3)
    g.add_node(4)
    g.add_node(5)
    g.add_node(6)
    g.add_node(7)
    g.add_node(8)
    g.add_node(9)
    g.add_node(10)
    g.add_edge(1, 2)
    g.add_edge(1, 5)
    g.add_edge(2, 3)
    g.add_edge(2, 6)
    g.add_edge(3, 8)
    g.add_edge(4, 9)
    g.add_edge(5, 10)
    g.add_edge(6, 8)
    g.add_edge(7, 9)
    g.add_edge(8, 9)
    assert g.depth_first_traversal(1) == [1, 2, 3, 8, 9, 6, 5, 10]


def test_dijkstra():
    g = Graph()
    g.add_node('1')
    g.add_edge('1', '2', 8)
    g.add_edge('1', '5', 4)
    g.add_edge('2', '3', 7)
    g.add_edge('2', 'e', 10)
    g.add_edge('3', '4', 5)
    g.add_edge('5', '3', 4)
    g.add_edge('5', '4', 1)
    g.add_edge('5', '6', 2)
    g.add_edge('6', '1', 9)
    assert g.dijkstra('1', '4') == (['1', '5', '4'], 5)
